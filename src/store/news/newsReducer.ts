import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '..';
import * as Types from './types';

export interface NewsState {
  posts: [];
}

const initialState: NewsState = {
  posts: [],
};


export const newsSlice = createSlice({
    name: 'news',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
  
      // Use the PayloadAction type to declare the contents of `action.payload`
      setPosts: (state: { posts: Types.Post[]; }, action: PayloadAction<Array<Types.Post>>) => {
        state.posts = action.payload;
      },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
  });

  export const { setPosts } = newsSlice.actions;

  export const selectPosts = (state: RootState) => state.news.posts;

  export default newsSlice.reducer;